
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.4.1
 * Query Engine version: 2f302df92bd8945e20ad4595a73def5b96afa54f
 */
Prisma.prismaVersion = {
  client: "5.4.1",
  engine: "2f302df92bd8945e20ad4595a73def5b96afa54f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SolarPanelScalarFieldEnum = {
  id: 'id',
  description: 'description',
  typeId: 'typeId',
  price: 'price',
  orderId: 'orderId',
  imageUrl: 'imageUrl',
  productPriceId: 'productPriceId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  quantity: 'quantity',
  SKU: 'SKU',
  imageUrl: 'imageUrl',
  categoryId: 'categoryId',
  ProductPriceId: 'ProductPriceId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.ProductRatingScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  productId: 'productId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.ProductPriceScalarFieldEnum = {
  id: 'id',
  price: 'price',
  productId: 'productId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.ProductViewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  review: 'review',
  productId: 'productId',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.ComponentScalarFieldEnum = {
  id: 'id',
  description: 'description',
  lenght: 'lenght',
  width: 'width',
  productPriceId: 'productPriceId',
  componentTypeId: 'componentTypeId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  SKU: 'SKU',
  productName: 'productName',
  description: 'description',
  quantityInStock: 'quantityInStock',
  unitPrice: 'unitPrice',
  discount: 'discount',
  categoryId: 'categoryId',
  supplierId: 'supplierId'
};

exports.Prisma.ComponentsBySolarPanelScalarFieldEnum = {
  id: 'id',
  solarPanelId: 'solarPanelId',
  componentId: 'componentId',
  quantity: 'quantity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.ComponentTypeScalarFieldEnum = {
  id: 'id',
  description: 'description',
  packagingTypeId: 'packagingTypeId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.SolarPanelViewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  solarPanelId: 'solarPanelId',
  viewedAt: 'viewedAt'
};

exports.Prisma.SolarPanelReviewsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  solarPanelId: 'solarPanelId',
  reviewDate: 'reviewDate',
  reviewText: 'reviewText'
};

exports.Prisma.SolarPanelRatingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  solarPanelId: 'solarPanelId',
  retingDate: 'retingDate'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  middlename: 'middlename',
  lastname: 'lastname',
  dob: 'dob',
  stateId: 'stateId',
  accountTypeId: 'accountTypeId',
  positionTypeId: 'positionTypeId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.SalesScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  solarPanelId: 'solarPanelId',
  quantitySold: 'quantitySold',
  unitPrice: 'unitPrice',
  discount: 'discount',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactId: 'contactId',
  website: 'website',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.EmailScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  email: 'email',
  emailTypeId: 'emailTypeId',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.RoleByUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  zipcode: 'zipcode',
  country: 'country',
  contactId: 'contactId',
  addressTypeId: 'addressTypeId',
  isPrivate: 'isPrivate',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.PhoneScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  phoneTypeId: 'phoneTypeId',
  phone: 'phone',
  isPrimary: 'isPrimary',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  username: 'username',
  email: 'email',
  password: 'password',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  title: 'title',
  orderStatusId: 'orderStatusId',
  userId: 'userId',
  toTalPrice: 'toTalPrice',
  orderDate: 'orderDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.OrderDetailsScalarFieldEnum = {
  id: 'id',
  amountUnits: 'amountUnits',
  orderId: 'orderId',
  solarPanelId: 'solarPanelId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.OrderStatusScalarFieldEnum = {
  id: 'id',
  Description: 'Description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.MeasurementScalarFieldEnum = {
  id: 'id',
  length: 'length',
  width: 'width',
  orderId: 'orderId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentMethodId: 'paymentMethodId',
  amount: 'amount',
  orderId: 'orderId',
  paymentStatusId: 'paymentStatusId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.PaymentDetailScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  orderId: 'orderId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  solarPanelId: 'solarPanelId',
  quantity: 'quantity',
  contactId: 'contactId'
};

exports.Prisma.ShippingInfoScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  recipientName: 'recipientName',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  shippingCarrrierName: 'shippingCarrrierName',
  reviewId: 'reviewId',
  rating: 'rating'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  cardTypeId: 'cardTypeId',
  userId: 'userId',
  cardNumber: 'cardNumber',
  expirationDate: 'expirationDate',
  CVV: 'CVV',
  contactId: 'contactId',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.PaymentStatusScalarFieldEnum = {
  id: 'id',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  SolarPanel: 'SolarPanel',
  Product: 'Product',
  ProductRating: 'ProductRating',
  ProductPrice: 'ProductPrice',
  ProductView: 'ProductView',
  ProductReview: 'ProductReview',
  Category: 'Category',
  Component: 'Component',
  Inventory: 'Inventory',
  ComponentsBySolarPanel: 'ComponentsBySolarPanel',
  ComponentType: 'ComponentType',
  SolarPanelView: 'SolarPanelView',
  SolarPanelReviews: 'SolarPanelReviews',
  SolarPanelRatings: 'SolarPanelRatings',
  Contact: 'Contact',
  Sales: 'Sales',
  Company: 'Company',
  Email: 'Email',
  Role: 'Role',
  RoleByUser: 'RoleByUser',
  Address: 'Address',
  Phone: 'Phone',
  User: 'User',
  Order: 'Order',
  OrderDetails: 'OrderDetails',
  OrderStatus: 'OrderStatus',
  Measurement: 'Measurement',
  Payment: 'Payment',
  PaymentDetail: 'PaymentDetail',
  Cart: 'Cart',
  ShippingInfo: 'ShippingInfo',
  Card: 'Card',
  PaymentStatus: 'PaymentStatus'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
